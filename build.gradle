plugins {
    id('java-library')
    id('maven-publish')
    id('signing')
}

group = 'io.github.jbock-java'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = '11'
    targetCompatibility = '11'
    options.compilerArgs << '--release'
    options.compilerArgs << '11'
}

javadoc {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.withType(GenerateModuleMetadata) {
    enabled = true
}

dependencies {
    api('io.github.jbock-java:guava:31.0.1.0')
    api('junit:junit:4.13.2')
}

jar {
    manifest {
        attributes(
                'Implementation-Version': project.properties['version']
        )
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events('failed')
    }
    excludes << '**/*Tester.class'
    excludes << 'com/google/common/io/ResourcesTest.class'
    excludes << 'com/google/common/io/FilesTest.class'
    if (project.hasProperty('test-collect')) {
        excludes << 'com/google/common/base/*.class'
        excludes << 'com/google/common/cache/*.class'
        excludes << 'com/google/common/escape/*.class'
        excludes << 'com/google/common/eventbus/*.class'
        excludes << 'com/google/common/graph/*.class'
        excludes << 'com/google/common/hash/*.class'
        excludes << 'com/google/common/html/*.class'
        excludes << 'com/google/common/io/*.class'
        excludes << 'com/google/common/math/*.class'
        excludes << 'com/google/common/net/*.class'
        excludes << 'com/google/common/primitives/*.class'
        excludes << 'com/google/common/reflect/*.class'
        excludes << 'com/google/common/util/concurrent/*.class'
        excludes << 'com/google/common/xml/*.class'
    } else {
        excludes << 'com/google/common/collect/*.class'
    }
    // gradle throws OutOfMemoryError when running >800k tests at once,
    // so we have to split the collect tests into smaller batches
    if (!project.hasProperty('collect-A-H')) {
//        excludes << 'com/google/common/collect/AtomicLongMapBasherTest.class'
//        excludes << 'com/google/common/collect/ConcurrentHashMultisetBasherTest.class'
        excludes << 'com/google/common/collect/A*.class'
        excludes << 'com/google/common/collect/B*.class'
        excludes << 'com/google/common/collect/C*.class'
        excludes << 'com/google/common/collect/D*.class'
        excludes << 'com/google/common/collect/E*.class'
        excludes << 'com/google/common/collect/F*.class'
        excludes << 'com/google/common/collect/G*.class'
        excludes << 'com/google/common/collect/H*.class'
    }
    if (!project.hasProperty('collect-I-N')) {
        excludes << 'com/google/common/collect/I*.class'
        excludes << 'com/google/common/collect/J*.class'
        excludes << 'com/google/common/collect/K*.class'
        excludes << 'com/google/common/collect/M*.class'
        excludes << 'com/google/common/collect/N*.class'
    }
    if (!project.hasProperty('collect-O-Z')) {
        excludes << 'com/google/common/collect/O*.class'
        excludes << 'com/google/common/collect/P*.class'
        excludes << 'com/google/common/collect/Q*.class'
        excludes << 'com/google/common/collect/R*.class'
        excludes << 'com/google/common/collect/S*.class'
        excludes << 'com/google/common/collect/T*.class'
        excludes << 'com/google/common/collect/U*.class'
        excludes << 'com/google/common/collect/V*.class'
        excludes << 'com/google/common/collect/W*.class'
        excludes << 'com/google/common/collect/X*.class'
        excludes << 'com/google/common/collect/Y*.class'
        excludes << 'com/google/common/collect/Z*.class'
    }
    maxHeapSize = '1536m'
    setForkEvery(64)
    setFailFast(true)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

artifacts {
    archives(javadocJar, sourcesJar)
}

// https://central.sonatype.org/pages/gradle.html
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'guava'
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'guava-testlib'
                packaging = 'jar'
                description = "Guava testlib is a set of java classes used for more convenient unit testing - particularly to assist the tests for Guava itself."
                url = 'https://github.com/jbock-java/guava'

                licenses {
                    license {
                        name = 'Apache 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Various'
                        name = 'Various'
                        email = 'jbock-java@gmx.de'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jbock-java/guava-testlib.git'
                    developerConnection = 'scm:git:https://github.com/jbock-java/guava-testlib.git'
                    url = 'https://github.com/jbock-java/guava-testlib'
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv('OSS_USER')
                password = System.getenv('OSS_PASS')
            }
        }
    }
}

// https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
